/**
 * Postinstall 스크립트:
 * 사용자의 프로젝트 루트에 src/Router.tsx 파일이 없으면 자동 생성함.
 */
const fs = require("fs");
const path = require("path");

function main() {
  const projectRoot = process.cwd();
  const srcDir = path.join(projectRoot, "src");
  const routerFile = path.join(srcDir, "Router.tsx");

  if (fs.existsSync(routerFile)) {
    console.log(
      "[vite-plugin-file-router] src/Router.tsx already exists. Skipping."
    );
    return;
  }

  if (!fs.existsSync(srcDir)) {
    fs.mkdirSync(srcDir, { recursive: true });
  }

  const template = `
/// <reference path="../global.d.ts" />
import React, { JSX } from "react";
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import fileRoutes from 'virtual:file-routes';

/**
 * RouteObject interface used for recursive route rendering.
 */
interface RouteObject {
  path: string;
  element: React.ReactNode;
  children?: RouteObject[];
}

/**
 * Recursively renders route objects as <Route> components.
 */
function renderRoutes(routes: RouteObject[]): JSX.Element[] {
  return routes.map((route, idx) => (
    <Route key={\`\${route.path}-\${idx}\`} path={route.path} element={route.element}>
      {route.children ? renderRoutes(route.children) : null}
    </Route>
  ));
}

/**
 * Auto-generated Router Component.
 */
const AutoGeneratedRouter: React.FC = () => {
  return (
    <BrowserRouter>
      <Routes>
        {renderRoutes(fileRoutes)}
      </Routes>
    </BrowserRouter>
  );
};

export default AutoGeneratedRouter;
`;

  fs.writeFileSync(routerFile, template, "utf-8");
  console.log("[vite-plugin-file-router] Created src/Router.tsx");
}

main();
